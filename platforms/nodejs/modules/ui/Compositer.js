/*
 * вариант Compositer, изначально называемым static.web в первоначальном дизайне capsule
 * Скорее всего будет кросплатформенным, то есть работать будет не только в nodejs, но и в gjs и С, потому что зависеть 
 * будет только от http_responder и других базовых модулей.
 * 
 * Пока что это начальный дизайн и далее будет proof of concept, пройдёт какое-то время, прежде чем этот дизайн превратится
 * в полноценный Compositer с точно таким же api как другие
 * Поскольку api будет такое же как у Compositer, то и расширяться он будет также. Часть кода вероятно будет заимствовано
 * из web Compositer.
 */

/*
 * Как это работает? В стиле сайтов 90х, чистый cgi, генерация страницы на каждое обновление, возможно с использованием
 * AJAX, но точно без websockets и прочих современных технологий. То есть приложение запускается как web server, и для
 * каждого клиента генерируется ui отдельно, точно также как работают веб сайты. Каждый клиент это просто сессия. В нашем
 * случае конечно есть не только Compositer, а значит для клиента создаётся подкапсула, создержащее приложение,обслуживающее * клиента.
 * Зачем это нужно? Для максимальной совместимости с любыми калькуляторами(любыми даже относительно древними железками) 
 * например. Но самое главное - для радикального снижения требования к клиенту:
 * + передавать клиенту только отрисованный ui и его изменения, без передачи всего приложения или даже кода, который 
 *   строит ui. Это значит, что приложение имеет минимальные требования к каналу. Это также значит, что для большого
 *   приложения, с которым активно работают такой способ будет более расточителен, нежели запуск всего приложения 
 *   на клиенте, потому как многократная передача отрисованного ui будет тяжелее, чем однократная передача приложения и 
 *   затем взаимодействие этого приложения с сервером.
 * + строить весь ui на сервере, всё приложение работает на сервере. Это значит, что вне зависимости от размера приложения
 *   нагрузка на клиента будет минимальна. Отрисовка достаточно объёмного html документа занимает очень мало времени даже
 *   на простейших смартфонах. В то время как исполнение массивного javascript приложения на стороне клиента может быть
 *   медленной.
 *  
 */

function ui() {
//    this.root = new root();

  this.render = function(){
    console.log('<html><body></body></html>');
  };
};

ui.prototype = {
    frame : frame
//    image : image,
//    text : text,
//    button : button,
//    entry : entry,
//    video : video,
//    anim : animation
};

exports.ui = ui;

