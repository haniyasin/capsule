/*
 * прозрачное представление файла, пригодное для: создания, чтения, записи и передачи файла
 * Отдельный тип для файла необходим, чтобы свести к минимуму ручную работу с файлами в коде приложений с
 * одной стороны и реализовать работу с файлами максимально эффективно с другой. 
 * Вот пара примеров:
 * 1)При dnd переносе файла из какого-нибудь файл менеджера в приложение - приложению будет передан файл.
 * Фактически, в большинстве окружений, передаётся не файл, а ссылка, как правило текстовая. Но например
 * в браузере, передаётся нечто среднее, не позволяющее обратится к файлу напрямую, но дающее возможность
 * читать с помощью blob. Любые подобные реализации легко скрываются общей концепцией файл, без необходимости
 * вникать в подробности. Вот пример гипотетического кода в таком случае:
 * 
 * function drop_handler(objects){
 *     if(objects[0] instanceof file){
 *         video.load(file); //здесь под video понимается элемент интерфейса video
 *     }
 * }
 * 2)
 *   Допустим у нас есть image, который мы хотим отдать пользователю как file
 * 
 * file_dropper.load(new file(some_image)); //file_dropper это элемент интерфейса, из которого можно перетащить файл
 *  
 * 
 */

//object - это объект одного из типов капсулы, то есть может быть как image, collection, так и file
module.exports = function(object){
    //internal browser api

    //getting url, created from blob object
    this._get_link = function(){
    };

    //public api
    
    this.name;
    this.path;
};