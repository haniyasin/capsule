<html>
<body>
  <script>
    var transport = function(){
//        this.create = function(address, features){
//            return {
//		
//	    }
//        }  
    }

    var url = "http://2du.ru/am/ct.js";
    var sid = 2;
    var p_queue = new Array; // массив, привязан к sid = 2

    //создаём сообщение, помещаем его в queue

    function msend(id, message, callback){
	p_queue.push({
	    id : id,
	    msg : message,
            size : message.length 
	});
    }
    msend(3, "dfdfdfdfdfdfdfdf", function(reply){console.log(reply)});
    msend(4, "dfdfdfdfdfdfdftt", function(reply){console.log(reply)});
    for (var p in p_queue){
//	console.log(p_queue[p].size);
    }

    //натравливаем на queue - packer
    //packer разбивает сообщения в queue на куски и упаковывает куски в http_frame
    
    var frames = [];
    function packer(){
	var frame_header = 20;
	var max_http_frame = 1200;
        var frame_cur_size = 0;
	var cur_frame = { m : []};
	for (var p in p_queue){
	    var p_size = p_queue[p].size + 16;
//	    console.log(max_http_frame - frame_cur_size);
//	    console.log(p_size);
	    if(p_size < max_http_frame){
		//влазит
		if(p_size < max_http_frame - frame_cur_size){
		    //влазит в текущий фрейм
		    frame_cur_size += p_size;
		    cur_frame.sid = sid; //надо присваивать при создании фрейма:)
		    cur_frame.m.push(p_queue[p]);
		    //		console.log(JSON.stringify(cur_frame));
		} else if( max_http_frame < frame_cur_size + frame_header){
		    //не влазит, но в текущем фрейме есть ещё чуток места
		} else {
		    //места нет нихрена, надо выделить новенький:)
		    frames.push(cur_frame);
		    cur_frame = { m : [] };
		    // повторяем иф
		}

	    } else {
		//дробим на пакеты
		
	    }
	    // проверяем влазит ли в текущий фрейм хоть что-то, разбиваем на пакеты, впихиваем либо сюда, либо в другие фреймы:)
	}
	frames.push(cur_frame);
    }

    packer();
    console.log(JSON.stringify(frames));

    //помещаем http_frame в http_outgoing queue
    //натравливаем на outgoing queue http_frame_sender
    //который отправляет фреймы, отслеживает состояние ajax запросов, и проверяет находятся ли в ответах сообщения о успешной доставке
    //тут надо отметить, что разница в том, как браузерный xmlhttprequest или nodejs http.request делаются - пренебрежимо мала, а значит нужна обёртка
    //а значит dealer реализация поидее должна быть кросбраузернонодовая:D
    //приходящие фреймы скармливаются queue unpaker, который проверят успешную доставку нужных пакетов и удаляет эти пакеты из очереди
    //также он запускает lp_worker, который деактивирует таймаут на отправку пустого пакета(если такой есть), устанавливает новый таймаут
    //дальше он передаёт полученные пакеты в collector
    //который собирает из пакетов сообщения, и если получаются полные сообщения
    //то передаёт их в message handler

    //абстрактная обёртка, оборачивающая разные http_server api, разные httpclient(browser xmlhttprequest, nodejs http.request)
    //send, on("recv", callback)
    //реализация без http, callback, иммитация потери пакетов(определённых размеров, произвольные потери, потери частей пакетов), задержки пакетов
    
  </script>
</body>
</html>
