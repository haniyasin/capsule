* Черновик, попытка описания что есть capsule и как её использовать

** Первые шаги
   Для начала нужно получить себе версию capsule, проще всего просто воспользоваться git. Предполагается,
   что у вас есть какой-нибудь linux, где установлены или nodejs или gnome3.
   
   В общем клонируем:
   git clone https://github.com/ixdu/capsule

   Далее ради интереса заглядываем в папку examples и просто пошарившись там делаем какие-нибудь выводы о
   структуре проектов, которые используют capsule.
   Затем создаём свою папку, скажем tutproject, в корне capsule
   capsule/tutproject

   Затем было бы неплохо ещё раз залесть в examples и попытаться вникнуть в структуру того же player, ну
   да ладно.
   Любом проект использующий capsule состоит как минимум из 3х файлов:
   + config.json
     В нём указывается как минимум имя и местоположение первой функции, которая будут выполнена при запуске
     приложения. То есть в отличие от обычных js окружений нет какого-то главного файла, который выполняется
     типо как загружаемый html в браузер или файл, который вы указываете в качестве аргумента nodejs. 
     Здесь же чётко указывается какая функция в каком модуле выполняется при запуске.
     По умолчанию это capsulated.main. Это значит модуль capsulated, функция main.
     
     Далее можно указать дополнительные настройки, вроде
     + deploy_type - http|file. 
       + http означает приложение при разворачивании будет выставлено как web приложение
       с помощью web server. 
       + file же значит, что приложение будет упаковано в набор html и js файлов. 
       При этом сама настройка deploy_type специфична для web платформы на данный момент
     + deploy_url
       адрес, по которому будет выстановлено приложение, если был указан deploy_type как http

   + somefile.json
     любой файл, с расширением .json, только если это не config.json будет загружаться в алфавитной
     последовательности(типо как правла во всяких там init, udev и тд).
     Такие файлы имеют одинаковую структуру(тут самое время посмотреть её на примере 
     examples/player/04capsulated.json. Смысл этих файлов описать все файлы, которые используются в проекте
     и сформировать виртуальное дерево из этих файлов. То есть если у нас допустим есть модуль capsulated.js,
     то мы его можем с помощью способа формирования виртуального дерева представить его и как ./capsulated.js
     и как ./somefolder/lib/capsulated.js.
     На что это влияет? На использование этих модулей или ресурсов в проекте. То есть из примера выше мы бы
     подгружали уже в коде данный модуль либо как require('capsulated') либо как 
     require('somefolder/lib/capsulated').
     В виртуальное дерево упаковываются не только модули, но и другие ресурсы, например изображения.
     Затем в коде они подгружаются как модули:
     require('somefolder/someimage').
     О том как это просходит и благодаря чему, мы ещё поговорим. Пока лишь скажу, что все ресурсы подгружаются
     не низкоуровнево как мы привыкли(прочитал файл, распарсил его с помощью какой-либо либы, получил объект),
     а сразу как объекты. То есть подгружаемое таким образом изображение сразу можно добавить на канвас например
     или отправить куда-нибудь.

   + somefile.js
     Должен быть хотя бы один js файл и он должен быть описан в хотя бы одном из файлов, которые описаны в 
     предыдущем пункте. js файлы это модули в понимании commonjs. В общем это и есть ваш работающий код и
     если такой файл один, то в нём и располагается точка входа в приложение.

   Дальше копируем содержимое examples/skeleton к себе в папку проекта и получаем самый минимум того, с чем
   можно работать. Правда скорректиируем пути в 04capsulated.json, заменив examples/skeleton на наш tutproject.

   Затем переходим(для этого удобно хотя бы иметь ещё одну вкладку терминала) в 
   capsule/platforms/ваша платформа/deployer. Допустим у вас gnome3, тогда вы очутитесь здесь:
   capsule/platforms/gjs/deployer
   И собираем наш скетел:
   ./deployer gjs assemble tutproject
   И запускаем:
   ./deployer gjs run tutproject
   Если видим hello, значит всё прошло хорошо и мы готовы двигаться дальше.

** Разбираемся дальше, модули, ресурсы, как оформлять и кто на ком стоит. 
   А самое главное, зачем всё это?
