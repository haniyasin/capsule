* Паттерны программирования, используемые в транспорте
  Транспорт предосталяет возможности, которые активируются transport_feature_*
  Некоторые из них определают тип транспорта, а именно:
  - dealer
  - router
  Каждый тип реализует некоторый подход, в соответствии с которым идёт работа с сообщениями.
  В один момент времени экземпляр транспорта может быть только одного типа. 
  Для установления соединения точка-точка, нужен dealer с одной стороны(как вызывающий) и router с другой(как отвечающий)

** dealer
   Инициализирует передачу сообщений, подключаясь к одному или более router. 
   Способен передавать множество сообщений и получать ответы на них в разном порядке(не в том, в котором они были отправлены).
   Не дожидается прихода ответа на сообщение. Ответов на одно сообщение может быть множество.
   При передачи сообщений нет никакой разницы кому передавать их. То есть, если dealer подключён к множеству router, то
   сообщение будет передано первому попавшемуся router. Однако все последующие сообщения с этим номером будут переданы тому же router. 
   Сообщения-ответы будут переданы именно тому router, который отправил само сообщение, на которое посылаются
   ответы.
   Нет никакого способа определить к какое число подключений у dealer, для потребителя это просто способ посылать сообщения.
** router
   Принимает подключения, может иметь адрес или адресы, на которые происходит подключение.
   Также как и dealer принимает и передаёт сообщения в любом порядке. При подключении к себе множества dealer, ни коим 
   образом не сообщает об этом, а просто смешивает все сообщения в общий поток. Так как сообщения имеют уникальные uuid,
   то сообщения из разных источников не конфликтуют. Ответы на пришедшие сообщения отправляются тем, кто послал пришедшие.
   Для потребителя, transport_router выглядит просто как источник сообщений, потребитель никогда не знает сколько реальных
   подключений скрыто за этим видом транспорта.

** зарезервированные
   для будущего использования типы-паттерны, описаны здесь прежде всего для понимания dealer и router, их работы и общей ситуации
*** req
    Request.
    Инициализирует передачу сообщений, подключаясь только одному rep или router.
    Передаёт сообщение, и дожидается ответа. При попытке передачи сообщения не дожидаясь ответа будет выдана ошибка передачи.
    Таким образом работа возможно только в режиме запрос-ответ, запрос-ответ и тд.
    Пример:
    нормальный режим
```javascript
    tt.send(2,'t', function(id,body){send(id,body)});
```
    ошибка
```javascript
    tt.send(2,'t', function(id,body){
    tt.send(id,body)
    tt.send(id,body)
    }); 
```

    ошибка
```javascript
    tt.send(2,'t', function(id,body){
    tt.send(1,body)
    }); 
```    
    
*** rep
    Reply
    Принимает подключение, только одно.
    Отвечает на приходящий запрос. Если попытаться послать сообщение, не в виде ответа на приходящее, то будет выдана ошибка.
    Таким образом это просто другая сторона по отношению к request
