* bin_container - binary container, абстракция, позволяющая работать с бинарным массивом на различных программных
и аппаратных платформах. Из-за того, что капсула может быть запущена в различных средах, обладающих разными возможностями
по работе с двоичными данными(где-то можно работать напрямую побайтно, где-то нет. Где-то можно использовать массивы
двоичных данных как источник для создания объектов, где-то нет). Было необходимо создать такую абстракцию, которая
бы могла инкапсулировать в себя методы хранения бинарных данных, доступные операции с ними и одновременно с этим
быть достаточно информативной, чтобы код, использующий такую абстракцию, всегда знал что он может делать с бинарными данными,
а чего не может.
Немного примеров. 
В современных браузерах, поддерживающих html5 и объект blob,  существует возможность взять данные
изображения, поместить их в blob, а затем создать объект изображения. То есть почти все нужные возможности для 
работы с бинарными данными есть. 
Однако в старых браузерах есть в лучшем случае urldata и возможность хранить
бинарные данные в виде base64. Это тоже неплохо, но всё же уже гораздо ограниченьнее, чем прямая работа с blob.
Тут есть и ограничения по размеру, и накладные расходы на хранение(30 процентов), на конвертацию.
В более старых браузерах проблем будет ещё больше и поддержки urldata может и не быть. Но это не значит, что нет
возможности эмулировать, например мы всегда можем создать сервер, который бы принимал base64 и возвращал url.
Помимо браузеров есть и другие платформы, например javame, где с бинарными данными можно работать как угодно.
Есть и обычные приложения для windows, linux, где также можно работать с бинарными данными как угодно.

Какую задачу решает bin_container? Как модуль капсулы, он решает задачу абстрагирования от среды, позволяет
писать код, который вне зависимости от среды может работать с бинарными данными одним и тем же способом.
Если вы будете писать код для разных браузеров, который скажем получает картинки для галлереи с сервера в 
base64 и показывает их, то вы столкнётесь с тем, что на старых браузерах это не будет работать, а на новых
будет работать неэффективно. Если же браузерная и серверная сторона будет использовать bin_container, то
всё будет работать, и будет работать максимально эффективно. Потому как для старых браузеров будут отправляться
url, для более новых base64, а для последнего поколения - прямой бинарный поток. 
Естественно, что и писать код будет гораздо проще, потому что bin_container интегрирован с другими модулями
капсулами, сделать что-то вроде
```javascript
transport.on_msg(1,function(id, body){
   cimage = comp.image_create({ width : '60%', height : '60%', x : '10%', y : '10%', source : new bin_container(body)})
}
```
И далее уже работать с этим изображением в compositer.
В противном случае вам бы пришлось, писать этот код по разному для разных поколений браузеров, и ещё по 
разному на серверной стороне, если бы хотели получить эффективную работу.
Важно понимать, что bin_container это обёртка, которая интегрированна с другими модулями капсулы так, чтобы
позволить вам работать с бинарными данными просто на разных платформах. Например: для поддержки старых
браузеров и использовании в compositer бинарных данных(например картинка), вместе работают сразу несколько
модулей капсулы: compositer, bin_container, transport, http_object_dispenser.

* specification

/*
 @type - type of binary data : auto, binary array, base64, url
 @data - data, base64 string or url string
*/ 
function bin_container(type, data){
    this.type; //url, dataurl, blob
    this.load = function(type, data);
    this.to_url = function();
    this.to_blob = function();
    this.to_base64 = function();
}
