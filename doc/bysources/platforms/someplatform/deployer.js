// собираем капсулу + набор нужных модулей по конфигурации под конкретную платформу
// исходными данными является каталог с конфигами, которые обрабатываются в числовом порядке
// каждый конфиг подобен по структуре тому, что используется exporter.js и по задумке просто
// копируется из конкретного проекта, который должен быть добавлен в результатирующий набор,
// например platforms/browser/capsule.json, dsa_mq.json, dsa_manager.json и тд.
// но конфиги можно писать и вручную, это целесообразно либо для каких-то особенных сборок,
// либо для добавления своих проектов в набор
// По идее, никакой особенной ручной работы для поддержки той или иной платформы не нужно
// делать, потому как для конкретной платформы уже есть конфиг капсулы. Но, всякое может быть.
// Также стоит подумать как правильно отработать зависимости, которые в браузере подгружаются
// как script/js, а в nodejs могут быть подгружены как модули. То есть как это оформлять в конфиге
// ведь изначально конфиг exporter для этого не задумывался, ну по крайней мере не в таком объёме.
function assemble(){
    
}

// развёртываем собранный набор и готовим к запуску
// на этом этапе также имеет значения обработка конфигов, наверное. потому как для развёртывания
// на разные платформы есть нюасны, которые указаны в конфигах, но возможен также вариант, что
// эти нюансы уже учтены в сгенерированных js файлах, то есть подобно тому, как exporter генерирует
// конструкторы для конфигов
function deploy(){
    
}

//запускаем развёрнутый набор
function run(){
}
