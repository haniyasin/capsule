Это набор инструментов, модулей и низкоуровневых компонентов, которые формируют единый API для всех поддерживаемых
платформ. Для каждой платформы поддерживается необходимое количество низкоуровневых и иных компонентов. 
На данный момент поддерживается: nodejs, browser. Поддержка gnome gjs в разработке. Планируется прямая поддержка android,
windows.
Архитектура capsule разработана с учётом возможности поддержки почти любой платформы.

* Что есть capsule с точки зрения пользователя?
Если некоторое приложение или сервис создан на базе capsule или платформ, которые используют её для своей основы(JSone), то
пользователь получает продукт, который одинаково хорошо будет работать и как браузерное приложение и как обычное
приложение. Скорее всего этот продукт будет требовать минимум зависимостей и при его загрузке не нужно будет ждать минуту,
пока браузер что-нибудь покажет(как бывает почти всегда, когда вы загружаете хоть сколько-нибудь серьёзное приложение в 
браузере, использующее canvas+тонны фреймворков или canvas+emscripten(C и С++ приложения)).

* Как это работает?
Начала проверяем, есть ли на вашем компьютере nodejs или gjs. Теоретически, может заработает на windows c
nodejs и wingw, но пока предполагается два работающих варианта:
+ linux + nodejs
+ linux + gnome3(gjs)

Затем:
git clone https://github.com/ixdu/capsule

Далее надо создать папку с конфигами для приложения, допустим взять на основу какой-нибудь из примеров:
cp capsule/tests/deployer/nodejs_cli capsule/newapplication

И пишем в capsulated.js что-нибудь вроде:

var transport = require('modules/transport.js');
var tdirect = require('modules/transport/direct.js');

var server = tdirect.create({ url : 'point'}, transport.features.server);
var client = tdirect.create({ url : 'point'}, transport.features.client);

server.on_connect(function(client){
    client.on_msg(function(body){
                      console.log(body);
                      client.send('send back' + body);
                  });	
});

client.on_msg(function(body){
                  console.log(body);
              });
client.connect();
client.send(JSON.stringify({ hello : 'hello world' }));

Далее заходим в реализацию той платформы, на которой мы работаем, допустим это gjs, собираем и запускаем проект:

cd capsule/platforms/gjs
./deployer assemble newapplication
./deployer run newapplication

Далее мы просто можем скопировать newapplication/assembled в любое местое и запускать так:
gjs assembled/application.js

Все необходимые зависимости будут включены в сборку.
Для nodejs всё делается также, только в качестве названия платформы используется nodejs.
Коротко о том, что происходит. 
deployer, на основе информации, которая указана в конфигах(какие модули нужны и какие будут к ним пути, как собирать и тд) делает автономную сборку вашего приложения. Включает в неё только те модули, которые указаны вконфигах и только для той платформы, для которой происходит сборка. Также в приложение включается код поддержки этой платформы. В зависимости от платформы, код её поддежки может быть как велик, так и мал. Разным может
быть и количество доступных для неё модулей.