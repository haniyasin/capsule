* Описание того, что такое удалённый модуль капсулы и как он работает

Удалённый модуль - это модуль, который запущен за пределами капсулы, как самостоятельная сущность. Такой модуль
может работать на другом устройстве, на этом же устройстве, но в другом окружении или даже в том же окружении, что
и сама капсула.
Для взаимодействия с капсулой, удалённый модуль использует протокол http, поверх которого используется простейший
протокол, основанный на http.socket. Для любого удалённоо модуля используется один и тот же протокол, отличается
лишь набор сообщений. Таким образом со стороны капсулы, нужно лишь единожды реализовать remote_connector
и он может использоваться для любых удалённых модулей. Поскольку удалённый модуль использует для транспорта http.socket,
а принцип работы http.socket прост, то сам удалённый модуль может включать в себя реализацию модуля и собственную
реализацию http.socket. Это даёт возможность реализовать удалённый модуль для тех платформ, где javascript не поддерживается,
на том языке, который поддерживается платформой или же для платформ, к которым capsule ещё не адаптирована.
Примеры использования удалённого модуля могут быть такими:
+ javame Compositer, реализованный целиком на java, включая собственную реализацию http.socket, таким образом
для отображения приложения на мобильном телефоне нужно минимум ресурсов самого мобильного телефона, он становится в
чистом виде remote ui
+ litewise web Compositer, тот же компосайтер, но используя http.socket релизацию, связывающийся с основной капсулой,
находящейся на сервере, без создания капсулы в браузере. Такой способ максимально освобождает браузер от работы, правда
хорош скорее как пример)
+ static web Compositer on php. Самостоятельная реализация компосайтера на php, включающая в себя собственную
реализацию http.socket для взаимодействия с nodejs капсулой. Даёт возможность легко подключить к приложению способ
отображения на старых и маломощных устройствах(старые браузеры, мобильные телефоны и тд)
+ android audio device. Реализациюя модуля audio для андроида, включающая собственную реализацию http.socket_cli для 
связи с nodejs капсулой. Позволяет например делать такое - у вас запущен плеер в браузере, играет музыка на
компьютере, затем вы переключаете на телефон музыку, или она автоматически переключается, когда вы выключаете
компьютер.

Примеров может быть много, думаю вы всё поняли)

** capsule api
Фактически, у вас вряд ли будет необходимость подключать удалённые модули вручную в коде, скорее всего
за вас это будет делать загрузчик вашей капсулы, а поскольку это загрузчик выставляющейся наружу капсулы,
то это exposer.

//init 
//Здесь инициализуерся exposer, дальнейшую работу по запуску капсулы, создаваемой по запросу, и подключению
к ней удалённых модулей он берёт на себя.
var exposer = require('node/modules/capsule/exposer.js');

exposer.listen({'url' : 'http://2du.ru/exposer'}, remote_connector.only_add);


//capsulated.js
//тот случай, если вы всё таки подключаете модули вручную, в капсулированном коде

var socket_srv = require('modules/transport/http/socket_srv.js');

var socket = socket_srv.create({'url' : 'http://2du.ru/remote_connector'});

modules.remote_connector(socket, 1, remote_connector.only_add, function(){
/*эта функция выполняется, когда подключается внешний модуль. Например так может
подключаеться javame Compsiter. В этом случае придпринимаются какие-то действия
Например факт подключения внешнего модуля воспринимается как поключения клиента,
например в случае, если внешний модуль это компосайтер, и создаются необходимые
данные для клиента и уже идёт с ним взаимодействие через компосайтер, кучу каллбэков,
мейнлуп и обработку данных.
*/
var frm_ind = modules.j2me_compositer.frame_create({ 'heigth' : '60%'});
});

** protocol

+ connect (client only)
  сообщение, отправляемое самим удалённым модулем к remote_connector
  'connect' : {
  'name' = 'static',
  'type' = 'compositer'
   }
+ disconnect (client | server
  'disconnect' : {
  'name' = 'static',
  'type' = 'compositer'
   }
+ requests(server) ///возможно когда-нибудь и client
  'requests' : [] array of jsonrpc
+ callbacks(client)
  'callbacks' : [] array of jsonrpc
