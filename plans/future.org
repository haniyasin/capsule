* как дальше жить
  В общем ситуация такая, изначально capsule - это база для JSone и поэтому его как бы нельзя было
  рассматривать как фреймворк общего назначения. Ну то есть сравнивать его скажем Qt или даже с nodejs
  не стоит. Скорее его можно сравнивать с web api в понимании мозиллы. То есть некоторая песочница с
  расширенным апи для доступа ко всяким вещам. Но если это песочница, то как насчёт http_responder, не
  многовато ли для песочницы? Многовато. Поэтому как ни крути, получается что мы движемся в сторону Qt, но
  развиваем только те направления, которые нам нужны в JSone. Но никаких непреодолимых препятствий сделать
  поддержку работы с файлами или скажем сокетами - нет. 
  Отсюда большой вопрос куда двигаться, пишу это здесь и чтобы в голове не держать и в случае, если capsule
  будет пользоваться кто-то ещё, чтобы прочли и выссказались.

** общее
   Сейчас deployer, тот что собирает ваше приложение используя capsule modules работает только под nodejs.
   То для для bootstrap вам необходим nodejs. Потенциально, и я думаю над этим, он сможет работать и под
   gjs и почти на любой платформе, где есть доступ к файловой системе. Поддержка работы deployer на разных
   платформах автоматически принесёт в capsule поддержку работы с файлами. 
   Но есть более интересный вопрос, а стоит ли как-то так изменить deployer, чтобы он работал даже там,
   где нет файлов, скажем в браузере? То есть имеет ли смысл? Изначально я думал так: нужно приспосабливаться
   к условиям, а не создавать свои. Например: публиковать в android play уже собранное приложение, вместо того
   чтобы человека заходил на вебсайт, оно загружалось и у него в браузере собиралось.  Сейчас я продолжаю
   думать также, ибо это самый прямой путь, но есть некоторые сомнения. С другой стороны, ничего не мешает
   отложить обдумывание этого на долго:)

** по модулям
   Это главный вопрос, как уже было сказано выше, сейчас capsule это свой мирок. Но расширить его вполне
   возможно. Нужно лишь определять API, скажем для доступа к файлам, и реализовать его в виде модулей для
   разных платформ. Всё для этого сделанож. Вопрос по API к файлам уже почти решён, ибо от него зависит
   deployer, а deployer я убеждён должен работать максимально native, то есть даже там, где нет nodejs,
   но есть какая-то возможность исполнять полноценные javascript приложения. А коли API к файлам будет,
   также планируюется sound API, то что, socket API чем-то отличается? И да и нет. 
   Изначально, capsule должен был иметь достаточно высокоуровневые API, и так оно сейчас и есть. Скажем
   вместо прямого использования http_requester предпочитается использовать transport. Также и storage.
   По этой причине всякие file, socket API и прочие _не должны_ использоваться приложениями слишком часто,
   напрямую и тд. То есть выходит, что всё API будет делится на highlevel и lowlevel. Но тем не менее,
   причина почему в capsule highlevel API в почёте всё ещё здесь - (javascript, он вам не С с точки зрения
   производительности и писать на нём используя низкоуровневые api мягко говоря не очень эффективно). Эта
   причина может быть устранена только используя подход, описанный в metaproto, но это будет когда? Через
   лет тысячу! Поэтому пока я считаю так - lovlevel api могут появляться и будут появляться, но не должны
   широко использоваться, это было бы ошибкой.
